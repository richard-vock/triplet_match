#ifndef _TRIPLET_MATCH_IDENTITY_TRAITS_
#define _TRIPLET_MATCH_IDENTITY_TRAITS_

#include "common"
#include "discretize"
#include "pointcloud"
#include "cartesian_tuple"

namespace triplet_match {

template <typename Point>
struct identity_traits {
    typedef pointcloud<Point> cloud_t;
    struct state_t {
        bbox3_t uvw_bounds;
    };
    typedef std::shared_ptr<state_t> handle_t;
    typedef std::shared_ptr<const state_t> const_handle_t;

    static constexpr int sample_count = 1;

    typedef repeat_t<Point, sample_count> samples_t;

    static handle_t
    init_from_model(typename cloud_t::ConstPtr cloud,
                    const subset_t& subset = subset_t());

    static handle_t init_from_samples(const const_handle_t& model_handle, const samples_t& samples);

    static std::optional<vec3f_t> project(const const_handle_t& handle, const vec3f_t& xyz);

    static vec3f_t unproject(const const_handle_t& handle, const vec3f_t& uvw);

    static vec3f_t tangent(const const_handle_t& handle, const Point& pnt);

    static vec3f_t normal(const const_handle_t& handle, const Point& pnt);

    static float intrinsic_distance(const const_handle_t& handle, const vec3f_t& p0,
                                    const vec3f_t& p1);
};

}  // namespace triplet_match

#ifndef TRIPLET_MATCH_PRECOMPILE_HEADERS
#include "impl/identity_traits.hpp"
#endif  // TRIPLET_MATCH_PRECOMPILE_HEADERS

#endif /* _TRIPLET_MATCH_IDENTITY_TRAITS_ */
// vim: syntax=cpp:
