#ifndef _TRIPLET_MATCH_SCENE_
#define _TRIPLET_MATCH_SCENE_

#include <unordered_map>

#include "common"
#include "model"
#include "cylinder"

namespace triplet_match {

template <typename Point>
class scene {
public:
    typedef std::unique_ptr<scene<Point>> uptr_t;
    typedef std::shared_ptr<scene<Point>> sptr_t;
    typedef std::weak_ptr<scene<Point>> wptr_t;
    typedef std::shared_ptr<const scene<Point>> const_sptr_t;
    typedef std::weak_ptr<const scene<Point>> const_wptr_t;

    typedef pcl::PointCloud<Point> cloud_t;
    typedef gpu::vector<gpu::float4_> gpu_data_t;

    struct statistics {
        double rejection_rate;
    };

    typedef cylinder<Point> projector_t;

public:
    scene(typename cloud_t::ConstPtr cloud, gpu_state::sptr_t state);

    virtual ~scene();

    void init(model<Point>& m, float max_corr_dist);

    //mat4f_t
    //find(model<Point>& m, uint32_t early_out_threshold,
    //     const sample_parameters& sample_params, statistics* stats = nullptr);

    std::pair<mat4f_t, uint32_t>
    find(model<Point>& m, uint32_t early_out_threshold,
         const sample_parameters& sample_params, const subset_t& subset = subset_t(),
         statistics* stats = nullptr);

    typename cloud_t::ConstPtr cloud() const;

    //gpu_data_t& device_data();

    //const gpu_data_t& device_data() const;

protected:
    struct impl;
    std::unique_ptr<impl> impl_;

};

}  // namespace triplet_match

#ifndef TRIPLET_MATCH_PRECOMPILE_HEADERS
#include "impl/scene.hpp"
#endif // TRIPLET_MATCH_PRECOMPILE_HEADERS

#endif /* _TRIPLET_MATCH_SCENE_ */
// vim: syntax=cpp:
