#ifndef _TRIPLET_MATCH_SCENE_
#define _TRIPLET_MATCH_SCENE_

#include <unordered_map>

#include "common"
#include "model"

namespace triplet_match {

template <typename Point>
class scene {
public:
    typedef std::unique_ptr<scene<Point>> uptr_t;
    typedef std::shared_ptr<scene<Point>> sptr_t;
    typedef std::weak_ptr<scene<Point>> wptr_t;
    typedef std::shared_ptr<const scene<Point>> const_sptr_t;
    typedef std::weak_ptr<const scene<Point>> const_wptr_t;

    typedef pcl::PointCloud<Point> cloud_t;

    struct statistics {
        double rejection_rate;
    };

public:
    scene(typename cloud_t::ConstPtr cloud);

    virtual ~scene();

    template <typename PointModel, typename ScoreFunctor,
              typename EarlyOutFunctor>
    mat4f_t find(model<PointModel>& m, ScoreFunctor&& score_func,
                 EarlyOutFunctor&& early_out_func,
                 const sample_parameters& sample_params, statistics* stats = nullptr);

    template <typename PointModel, typename ScoreFunctor,
              typename EarlyOutFunctor>
    std::pair<mat4f_t, uint32_t>
    find(model<PointModel>& m, ScoreFunctor&& score_func,
         EarlyOutFunctor&& early_out_func,
         const sample_parameters& sample_params, const subset_t& subset, statistics* stats = nullptr);

    typename cloud_t::ConstPtr cloud() const;

protected:
    struct impl;
    std::unique_ptr<impl> impl_;

};

}  // namespace triplet_match

#include "scene.ipp"
#ifndef TRIPLET_MATCH_PRECOMPILE_HEADERS
#include "impl/scene.hpp"
#endif // TRIPLET_MATCH_PRECOMPILE_HEADERS

#endif /* _TRIPLET_MATCH_SCENE_ */
// vim: syntax=cpp:
