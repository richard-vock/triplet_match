#ifndef _TRIPLET_MATCH_SCENE_
#define _TRIPLET_MATCH_SCENE_

#include "common"
#include "model"
#include "octree"

namespace triplet_match {

template <typename Point>
class scene {
public:
    typedef std::unique_ptr<scene<Point>> uptr_t;
    typedef std::shared_ptr<scene<Point>> sptr_t;
    typedef std::weak_ptr<scene<Point>> wptr_t;
    typedef std::shared_ptr<const scene<Point>> const_sptr_t;
    typedef std::weak_ptr<const scene<Point>> const_wptr_t;

    typedef model<Point> model_t;
    typedef pointcloud<Point> cloud_t;
    typedef octree<Point> octree_t;

    typedef struct match_ {
        mat4f_t transform;
        subset_t scene_corrs;
        subset_t model_corrs;
        double signed_score;
    } match_t;
    //typedef std::tuple<mat4f_t, subset_t, subset_t, int32_t> match_t;

    struct statistics {
        double rejection_rate;
    };

public:
    scene(typename cloud_t::Ptr cloud);

    virtual ~scene();

    //match_t
    //find(model<Proj, Point>& m, float dist_thres, uint32_t early_out_threshold,
    //     const sample_parameters& sample_params, const subset_t& sample_candidates = subset_t());

    //std::vector<match_t>
    //find_all(model<Point>& m, float dist_thres, float octree_diameter_factor, float model_match_factor, float early_out_factor, const sample_parameters& sample_params, uint32_t max_icp_iterations, bool only_first = false, subset_t* firsts = nullptr);

    std::vector<match_t>
    find_all_parallel(model<Point>& m, float dist_thres, float model_match_factor, float early_out_factor, const sample_parameters& sample_params, uint32_t max_icp_iterations);

    typename cloud_t::Ptr
    instantiate(model<Point>& m, const match_t& match, bool instantiate_all = false);

    typename cloud_t::ConstPtr cloud() const;

protected:
    struct impl;
    std::unique_ptr<impl> impl_;

};

}  // namespace triplet_match

#ifndef TRIPLET_MATCH_PRECOMPILE_HEADERS
#include "impl/scene.hpp"
#endif // TRIPLET_MATCH_PRECOMPILE_HEADERS

#endif /* _TRIPLET_MATCH_SCENE_ */
// vim: syntax=cpp:
