#ifndef _TRIPLET_MATCH_MODEL_
#define _TRIPLET_MATCH_MODEL_

#include <unordered_map>

#include "common"
#include "feature"
#include "pointcloud"
#include "range"

namespace triplet_match {

template <typename Point>
class model {
public:
    typedef std::unique_ptr<model<Point>> uptr_t;
    typedef std::shared_ptr<model<Point>> sptr_t;
    typedef std::weak_ptr<model<Point>> wptr_t;
    typedef std::shared_ptr<const model<Point>> const_sptr_t;
    typedef std::weak_ptr<const model<Point>> const_wptr_t;

    typedef pointcloud<Point> cloud_t;
    typedef std::tuple<uint32_t, uint32_t, uint32_t> result_t;
    typedef std::unordered_multimap<discrete_feature_t, result_t> hash_map_t;
    typedef typename hash_map_t::const_iterator pair_iter_t;

public:
    model(typename cloud_t::ConstPtr cloud, discretization_params params);

    virtual ~model();

    void init(const sample_parameters& sample_params);

    void init(const subset_t& subset, const sample_parameters& sample_params);

    std::pair<pair_iter_t, pair_iter_t>
    query(const feature_t& f, bool debug = false);

    std::optional<uint32_t>
    voxel_query(const vec4f_t& local, bool debug = false) const;

    //std::optional<float> voxel_distance(const vec3f_t& local) const;

    float diameter() const;

    uint32_t point_count() const;

    const vec3i_t& extents() const;

    int margin() const;

    uint64_t pair_count() const;

    typename cloud_t::ConstPtr cloud() const;

    const feature_bounds_t& feature_bounds() const;

protected:
    struct impl;
    std::unique_ptr<impl> impl_;
};

}  // namespace triplet_match

#ifndef TRIPLET_MATCH_PRECOMPILE_HEADERS
#include "impl/model.hpp"
#endif  // TRIPLET_MATCH_PRECOMPILE_HEADERS

#endif /* _TRIPLET_MATCH_MODEL_ */

// vim: syntax=cpp
