#ifndef _TRIPLET_MATCH_FEATURE_
#define _TRIPLET_MATCH_FEATURE_

#include "common"
#include "discretize"
#include "pointcloud"

namespace triplet_match {

static constexpr int feature_dimension = 7;
typedef Eigen::Matrix<float, feature_dimension, 1> feature_t;
typedef Eigen::Matrix<uint32_t, feature_dimension, 1> discrete_feature_t;
typedef Eigen::AlignedBox<float, feature_dimension> feature_bounds_t;

template <typename Point>
using curv_info_t = typename pointcloud<Point>::curvature_info_t;

template <typename Point>
std::optional<feature_t>
feature(const Point& pnt_0,
        const Point& pnt_1, const Point& pnt_2, const curv_info_t<Point>& crv_0,
        const curv_info_t<Point>& crv_1, const curv_info_t<Point>& crv_2);

template <typename Point>
discrete_feature_t
discretize_feature(const feature_t& f,
                   const feature_bounds_t& bounds,
                   const discretization_params& params);

template <typename Point>
bool valid(const feature_t& f,
           const feature_bounds_t& bounds);

feature_bounds_t
valid_bounds(const feature_bounds_t& bounds, float min_angle, float max_angle,
             float min_rel_dist, float max_rel_dist);

}  // namespace triplet_match

#ifndef TRIPLET_MATCH_PRECOMPILE_HEADERS
#include "impl/feature.hpp"
#endif  // TRIPLET_MATCH_PRECOMPILE_HEADERS

#endif /* _TRIPLET_MATCH_FEATURE_ */

// vim: syntax=cpp
