#ifndef _TRIPLET_MATCH_COMMON_
#define _TRIPLET_MATCH_COMMON_

#include <memory>
#include <vector>
#include <numeric>
#include <algorithm>
#include <future>
#include <functional>

#include <Eigen/Dense>
#include <Eigen/Geometry>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/search/kdtree.h>

#include "config"

namespace triplet_match {

typedef Eigen::Vector3f vec3f_t;
typedef Eigen::RowVector3f rvec3f_t;
typedef Eigen::Vector3i vec3i_t;
typedef Eigen::RowVector3i rvec3i_t;
typedef Eigen::Vector4f vec4f_t;
typedef Eigen::RowVector4f rvec4f_t;
typedef Eigen::Matrix3f mat3f_t;
typedef Eigen::Matrix4f mat4f_t;
typedef Eigen::MatrixXf matf_t;
typedef Eigen::AlignedBox<float, 3> bbox3_t;

typedef Eigen::Array3f arr3f_t;
typedef Eigen::Array3i arr3i_t;

typedef Eigen::AlignedBox<float, 3> bbox3_t;

typedef Eigen::Quaternionf quat_t;

typedef std::vector<uint32_t> subset_t;

struct sample_parameters {
    float min_diameter_factor;
    float max_diameter_factor;
    float min_orthogonality;
    float redundancy_factor;
};

} // triplet_match

#endif /* _TRIPLET_MATCH_COMMON_ */
