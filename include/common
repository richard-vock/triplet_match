#ifndef _TRIPLET_MATCH_COMMON_
#define _TRIPLET_MATCH_COMMON_

#include <memory>
#include <vector>
#include <numeric>
#include <algorithm>
#include <future>
#include <functional>
#include <iostream>

#include <Eigen/Dense>
#include <Eigen/Geometry>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl/search/kdtree.h>

#include <boost/compute.hpp>

#include <fmt/format.h>
#include <fmt/ostream.h>
#include <range/v3/all.hpp>
namespace vw  = ranges::view;
namespace act = ranges::action;

#include "config"

namespace triplet_match {

namespace gpu = boost::compute;

typedef Eigen::Vector2f vec2f_t;
typedef Eigen::RowVector2f rvec2f_t;
typedef Eigen::Vector2i vec2i_t;
typedef Eigen::RowVector2i rvec2i_t;
typedef Eigen::Vector3f vec3f_t;
typedef Eigen::RowVector3f rvec3f_t;
typedef Eigen::Vector3i vec3i_t;
typedef Eigen::RowVector3i rvec3i_t;
typedef Eigen::Vector4f vec4f_t;
typedef Eigen::RowVector4f rvec4f_t;
typedef Eigen::Matrix3f mat3f_t;
typedef Eigen::Matrix4f mat4f_t;
typedef Eigen::MatrixXf matf_t;
typedef Eigen::AlignedBox<float, 3> bbox3_t;

typedef Eigen::Array3f arr3f_t;
typedef Eigen::Array3i arr3i_t;

typedef Eigen::AlignedBox<float, 2> bbox2_t;
typedef Eigen::AlignedBox<float, 3> bbox3_t;

typedef Eigen::Quaternionf quatf_t;

typedef std::vector<uint32_t> subset_t;

struct gpu_state {
    typedef std::shared_ptr<gpu_state> sptr_t;

    gpu_state();

    gpu::device device;
    gpu::context context;
    gpu::command_queue queue;
};

struct sample_parameters {
    float min_triplet_ratio;
    float max_triplet_ratio;
    float search_min_scale;
    float search_max_scale;
    float min_diameter_factor;
    float max_diameter_factor;
    float min_orthogonality;
    float redundancy_factor;
};

template <class... Ts>
struct overloaded : Ts... {
    using Ts::operator()...;
};
template <class... Ts>
overloaded(Ts...)->overloaded<Ts...>;

template <typename... Args>
inline void pdebug(const char *format, const Args & ... args) {
    fmt::print("[D] ");
    fmt::print(format, args...);
    putchar('\n');
}

template <typename... Args>
inline void println(const char *format, const Args & ... args) {
    fmt::print(format, args...);
    putchar('\n');
}

} // triplet_match

#endif /* _TRIPLET_MATCH_COMMON_ */
